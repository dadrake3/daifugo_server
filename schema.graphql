type Card {
	suit: String
	rank: String
    is_joker: Boolean!
}

type Game {
	id: ID!
	state_id: String!
	joinable: Boolean!
	# player_count: Int!
	players: [String]!
}

type GameState {
	id: ID!
	game_id: String!
	active_player_idx: Int!
	active_player_id: String!
	last_played_idx: Int!
	top_of_pile: [String]!
	pot_size: Int!
	revolution: Boolean!
	direction: Boolean!
	active_pattern: String
}


type Hand {
	id: ID!
	cards: [String]!
}

type Player {
	id: ID!
	name: String!
	game_id: String!
	hand_id: String
	rank: Int
	has_passed: Boolean
}

type Mutation {
	# pure insert mutations
	createGame: Game
	updateGame(
		id: ID!,
		state_id: String,
		joinable: Boolean,
		players: [String]
	): Game
	createPlayer(name: String!, game_id: String!, hand_id: String!): Player
	updatePlayer(
		id: ID!
		rank: Int,
		hand_id: String,
		has_passed: Boolean
	): Player
	createState(game_id: String!, active_player_id: String!, active_player_idx: Int!): GameState
	updateState(
		id: ID!, 
		active_player_idx: Int,
		last_played_idx: Int,
		active_player_id: String,
		top_of_pile: [String],
		pot_size: Int,
		active_pattern: String,
		revolution: Boolean,
		direction: Boolean
	): GameState
	createHand: Hand
	updateHand(id: ID!, cards: [String]!): Hand
	
	## composite lambda endpoints that call multiple mutations
	joinGame(game_id: ID!, player_name: String!): Player
	startGame(game_id: String!): GameState
	playCards(game_id: String!, player_id: String!, cards: [String]!, discards: [String]!): GameState
    tradeCards(
		id_from: ID!,
		id_to: ID!,
		cards_from: [String]!,
		cards_to: [String]
	): [Hand]
}

type Query {
	getGame(id: ID!): Game
}

type Subscription {
	updatedHand(id: ID!): Hand
		@aws_subscribe(mutations: ["updateHand","createHand"])
	updatedState(game_id: ID!): GameState
		@aws_subscribe(mutations: ["updateState","createState"])
	updatedPlayer(id: ID!): Player
		@aws_subscribe(mutations: ["updatePlayer"])


}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}